// Code generated by MockGen. DO NOT EDIT.
// Source: ./port.go

// Package mock_port is a generated GoMock package.
package mock_port

import (
	context "context"
	reflect "reflect"

	entity "github.com/eduardobcolombo/learning-grpc/cmd/server/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockStorer is a mock of Storer interface.
type MockStorer struct {
	ctrl     *gomock.Controller
	recorder *MockStorerMockRecorder
}

// MockStorerMockRecorder is the mock recorder for MockStorer.
type MockStorerMockRecorder struct {
	mock *MockStorer
}

// NewMockStorer creates a new mock instance.
func NewMockStorer(ctrl *gomock.Controller) *MockStorer {
	mock := &MockStorer{ctrl: ctrl}
	mock.recorder = &MockStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorer) EXPECT() *MockStorerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStorer) Create(ctx context.Context, port entity.Port) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, port)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockStorerMockRecorder) Create(ctx, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStorer)(nil).Create), ctx, port)
}

// Delete mocks base method.
func (m *MockStorer) Delete(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStorerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorer)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockStorer) GetAll(ctx context.Context) ([]entity.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]entity.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockStorerMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockStorer)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockStorer) GetByID(ctx context.Context, id uint) (*entity.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entity.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockStorerMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockStorer)(nil).GetByID), ctx, id)
}

// GetByUnloc mocks base method.
func (m *MockStorer) GetByUnloc(ctx context.Context, unloc string) (*entity.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUnloc", ctx, unloc)
	ret0, _ := ret[0].(*entity.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUnloc indicates an expected call of GetByUnloc.
func (mr *MockStorerMockRecorder) GetByUnloc(ctx, unloc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUnloc", reflect.TypeOf((*MockStorer)(nil).GetByUnloc), ctx, unloc)
}

// Update mocks base method.
func (m *MockStorer) Update(ctx context.Context, port entity.Port) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, port)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStorerMockRecorder) Update(ctx, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStorer)(nil).Update), ctx, port)
}

// MockStorerReader is a mock of StorerReader interface.
type MockStorerReader struct {
	ctrl     *gomock.Controller
	recorder *MockStorerReaderMockRecorder
}

// MockStorerReaderMockRecorder is the mock recorder for MockStorerReader.
type MockStorerReaderMockRecorder struct {
	mock *MockStorerReader
}

// NewMockStorerReader creates a new mock instance.
func NewMockStorerReader(ctrl *gomock.Controller) *MockStorerReader {
	mock := &MockStorerReader{ctrl: ctrl}
	mock.recorder = &MockStorerReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorerReader) EXPECT() *MockStorerReaderMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockStorerReader) GetAll(ctx context.Context) ([]entity.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]entity.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockStorerReaderMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockStorerReader)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockStorerReader) GetByID(ctx context.Context, id uint) (*entity.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entity.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockStorerReaderMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockStorerReader)(nil).GetByID), ctx, id)
}

// GetByUnloc mocks base method.
func (m *MockStorerReader) GetByUnloc(ctx context.Context, unloc string) (*entity.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUnloc", ctx, unloc)
	ret0, _ := ret[0].(*entity.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUnloc indicates an expected call of GetByUnloc.
func (mr *MockStorerReaderMockRecorder) GetByUnloc(ctx, unloc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUnloc", reflect.TypeOf((*MockStorerReader)(nil).GetByUnloc), ctx, unloc)
}

// MockStorerWriter is a mock of StorerWriter interface.
type MockStorerWriter struct {
	ctrl     *gomock.Controller
	recorder *MockStorerWriterMockRecorder
}

// MockStorerWriterMockRecorder is the mock recorder for MockStorerWriter.
type MockStorerWriterMockRecorder struct {
	mock *MockStorerWriter
}

// NewMockStorerWriter creates a new mock instance.
func NewMockStorerWriter(ctrl *gomock.Controller) *MockStorerWriter {
	mock := &MockStorerWriter{ctrl: ctrl}
	mock.recorder = &MockStorerWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorerWriter) EXPECT() *MockStorerWriterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStorerWriter) Create(ctx context.Context, port entity.Port) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, port)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockStorerWriterMockRecorder) Create(ctx, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStorerWriter)(nil).Create), ctx, port)
}

// Delete mocks base method.
func (m *MockStorerWriter) Delete(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStorerWriterMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorerWriter)(nil).Delete), ctx, id)
}

// Update mocks base method.
func (m *MockStorerWriter) Update(ctx context.Context, port entity.Port) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, port)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStorerWriterMockRecorder) Update(ctx, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStorerWriter)(nil).Update), ctx, port)
}
