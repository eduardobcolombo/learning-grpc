services:

  server:
    build:
      context: .
      dockerfile: ./deploy/docker/Dockerfile.server
      target: server
      args:
        goflags: '"-tags=release" "-gcflags=all=-N -l"' # -gcflags for dlv debugger
      
    env_file:
      - ./deploy/docker-local.env
    ports: 
      - "50053:50053"
      # - "40000:40000" # for dlv debugger
    deploy:
      resources:
        limits:
          memory: 200M
        reservations:
          memory: 20M
    depends_on:
      - postgres
    restart: on-failure      
    networks: 
      - grpc-network

  client:
    build:
      context: .
      dockerfile: ./deploy/docker/Dockerfile.client
      target: client
    env_file:
      - ./deploy/docker-local.env
    volumes:
      - ./data:/data
    deploy:
      resources:
        limits:
          memory: 200M
        reservations:
          memory: 20M
    depends_on: 
      - server
    restart: on-failure      
    ports: 
      - "8888:8888"
      # - "40000:40000"      
    networks: 
      - grpc-network

  postgres:
    image: postgres:16-alpine
    env_file:
      - ./deploy/docker-local.env
    ports:
      - "5432:5432"
    networks: 
      - grpc-network
 
  reverse-proxy:
    # The official v3 Traefik docker image
    image: traefik:v3.2
    # Enables the web UI and tells Traefik to listen to docker
    command: --api.insecure=true --providers.docker
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock 
      
volumes:
  data:

networks: 
  grpc-network:
    driver: bridge