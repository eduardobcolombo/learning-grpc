// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.2
// source: ports.proto

package portpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PortServiceClient is the client API for PortService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortServiceClient interface {
	// Client Streaming
	UpdateAll(ctx context.Context, opts ...grpc.CallOption) (PortService_UpdateAllClient, error)
	// Server Streaming
	GetAll(ctx context.Context, in *PortsGetAllRequest, opts ...grpc.CallOption) (PortService_GetAllClient, error)
	GetById(ctx context.Context, in *PortIdRequest, opts ...grpc.CallOption) (*PortResponse, error)
	GetByUnloc(ctx context.Context, in *PortUnlocRequest, opts ...grpc.CallOption) (*PortResponse, error)
	Create(ctx context.Context, in *PortRequest, opts ...grpc.CallOption) (*PortBoolResponse, error)
	Update(ctx context.Context, in *PortRequest, opts ...grpc.CallOption) (*PortBoolResponse, error)
	Delete(ctx context.Context, in *PortIdRequest, opts ...grpc.CallOption) (*PortBoolResponse, error)
}

type portServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortServiceClient(cc grpc.ClientConnInterface) PortServiceClient {
	return &portServiceClient{cc}
}

func (c *portServiceClient) UpdateAll(ctx context.Context, opts ...grpc.CallOption) (PortService_UpdateAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &PortService_ServiceDesc.Streams[0], "/port.PortService/UpdateAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &portServiceUpdateAllClient{stream}
	return x, nil
}

type PortService_UpdateAllClient interface {
	Send(*PortRequest) error
	CloseAndRecv() (*PortStringResponse, error)
	grpc.ClientStream
}

type portServiceUpdateAllClient struct {
	grpc.ClientStream
}

func (x *portServiceUpdateAllClient) Send(m *PortRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *portServiceUpdateAllClient) CloseAndRecv() (*PortStringResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PortStringResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *portServiceClient) GetAll(ctx context.Context, in *PortsGetAllRequest, opts ...grpc.CallOption) (PortService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &PortService_ServiceDesc.Streams[1], "/port.PortService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &portServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PortService_GetAllClient interface {
	Recv() (*PortResponse, error)
	grpc.ClientStream
}

type portServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *portServiceGetAllClient) Recv() (*PortResponse, error) {
	m := new(PortResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *portServiceClient) GetById(ctx context.Context, in *PortIdRequest, opts ...grpc.CallOption) (*PortResponse, error) {
	out := new(PortResponse)
	err := c.cc.Invoke(ctx, "/port.PortService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) GetByUnloc(ctx context.Context, in *PortUnlocRequest, opts ...grpc.CallOption) (*PortResponse, error) {
	out := new(PortResponse)
	err := c.cc.Invoke(ctx, "/port.PortService/GetByUnloc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) Create(ctx context.Context, in *PortRequest, opts ...grpc.CallOption) (*PortBoolResponse, error) {
	out := new(PortBoolResponse)
	err := c.cc.Invoke(ctx, "/port.PortService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) Update(ctx context.Context, in *PortRequest, opts ...grpc.CallOption) (*PortBoolResponse, error) {
	out := new(PortBoolResponse)
	err := c.cc.Invoke(ctx, "/port.PortService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) Delete(ctx context.Context, in *PortIdRequest, opts ...grpc.CallOption) (*PortBoolResponse, error) {
	out := new(PortBoolResponse)
	err := c.cc.Invoke(ctx, "/port.PortService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortServiceServer is the server API for PortService service.
// All implementations must embed UnimplementedPortServiceServer
// for forward compatibility
type PortServiceServer interface {
	// Client Streaming
	UpdateAll(PortService_UpdateAllServer) error
	// Server Streaming
	GetAll(*PortsGetAllRequest, PortService_GetAllServer) error
	GetById(context.Context, *PortIdRequest) (*PortResponse, error)
	GetByUnloc(context.Context, *PortUnlocRequest) (*PortResponse, error)
	Create(context.Context, *PortRequest) (*PortBoolResponse, error)
	Update(context.Context, *PortRequest) (*PortBoolResponse, error)
	Delete(context.Context, *PortIdRequest) (*PortBoolResponse, error)
	mustEmbedUnimplementedPortServiceServer()
}

// UnimplementedPortServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPortServiceServer struct {
}

func (UnimplementedPortServiceServer) UpdateAll(PortService_UpdateAllServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateAll not implemented")
}
func (UnimplementedPortServiceServer) GetAll(*PortsGetAllRequest, PortService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedPortServiceServer) GetById(context.Context, *PortIdRequest) (*PortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedPortServiceServer) GetByUnloc(context.Context, *PortUnlocRequest) (*PortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUnloc not implemented")
}
func (UnimplementedPortServiceServer) Create(context.Context, *PortRequest) (*PortBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPortServiceServer) Update(context.Context, *PortRequest) (*PortBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPortServiceServer) Delete(context.Context, *PortIdRequest) (*PortBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPortServiceServer) mustEmbedUnimplementedPortServiceServer() {}

// UnsafePortServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortServiceServer will
// result in compilation errors.
type UnsafePortServiceServer interface {
	mustEmbedUnimplementedPortServiceServer()
}

func RegisterPortServiceServer(s grpc.ServiceRegistrar, srv PortServiceServer) {
	s.RegisterService(&PortService_ServiceDesc, srv)
}

func _PortService_UpdateAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PortServiceServer).UpdateAll(&portServiceUpdateAllServer{stream})
}

type PortService_UpdateAllServer interface {
	SendAndClose(*PortStringResponse) error
	Recv() (*PortRequest, error)
	grpc.ServerStream
}

type portServiceUpdateAllServer struct {
	grpc.ServerStream
}

func (x *portServiceUpdateAllServer) SendAndClose(m *PortStringResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *portServiceUpdateAllServer) Recv() (*PortRequest, error) {
	m := new(PortRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PortService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PortsGetAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PortServiceServer).GetAll(m, &portServiceGetAllServer{stream})
}

type PortService_GetAllServer interface {
	Send(*PortResponse) error
	grpc.ServerStream
}

type portServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *portServiceGetAllServer) Send(m *PortResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PortService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/port.PortService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).GetById(ctx, req.(*PortIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_GetByUnloc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortUnlocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).GetByUnloc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/port.PortService/GetByUnloc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).GetByUnloc(ctx, req.(*PortUnlocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/port.PortService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).Create(ctx, req.(*PortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/port.PortService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).Update(ctx, req.(*PortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/port.PortService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).Delete(ctx, req.(*PortIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PortService_ServiceDesc is the grpc.ServiceDesc for PortService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "port.PortService",
	HandlerType: (*PortServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetById",
			Handler:    _PortService_GetById_Handler,
		},
		{
			MethodName: "GetByUnloc",
			Handler:    _PortService_GetByUnloc_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PortService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PortService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PortService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateAll",
			Handler:       _PortService_UpdateAll_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _PortService_GetAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ports.proto",
}
