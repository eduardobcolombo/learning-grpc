// Code generated by MockGen. DO NOT EDIT.
// Source: ./ports_grpc.pb.go

// Package mock_portpb is a generated GoMock package.
package mock_portpb

import (
	context "context"
	reflect "reflect"

	portpb "github.com/eduardobcolombo/learning-grpc/portpb"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockPortServiceClient is a mock of PortServiceClient interface.
type MockPortServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPortServiceClientMockRecorder
}

// MockPortServiceClientMockRecorder is the mock recorder for MockPortServiceClient.
type MockPortServiceClientMockRecorder struct {
	mock *MockPortServiceClient
}

// NewMockPortServiceClient creates a new mock instance.
func NewMockPortServiceClient(ctrl *gomock.Controller) *MockPortServiceClient {
	mock := &MockPortServiceClient{ctrl: ctrl}
	mock.recorder = &MockPortServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortServiceClient) EXPECT() *MockPortServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPortServiceClient) Create(ctx context.Context, in *portpb.PortRequest, opts ...grpc.CallOption) (*portpb.PortBoolResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*portpb.PortBoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPortServiceClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPortServiceClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockPortServiceClient) Delete(ctx context.Context, in *portpb.PortIdRequest, opts ...grpc.CallOption) (*portpb.PortBoolResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*portpb.PortBoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPortServiceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPortServiceClient)(nil).Delete), varargs...)
}

// GetAll mocks base method.
func (m *MockPortServiceClient) GetAll(ctx context.Context, in *portpb.PortsGetAllRequest, opts ...grpc.CallOption) (portpb.PortService_GetAllClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAll", varargs...)
	ret0, _ := ret[0].(portpb.PortService_GetAllClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPortServiceClientMockRecorder) GetAll(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPortServiceClient)(nil).GetAll), varargs...)
}

// GetById mocks base method.
func (m *MockPortServiceClient) GetById(ctx context.Context, in *portpb.PortIdRequest, opts ...grpc.CallOption) (*portpb.PortResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetById", varargs...)
	ret0, _ := ret[0].(*portpb.PortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockPortServiceClientMockRecorder) GetById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockPortServiceClient)(nil).GetById), varargs...)
}

// GetByUnloc mocks base method.
func (m *MockPortServiceClient) GetByUnloc(ctx context.Context, in *portpb.PortUnlocRequest, opts ...grpc.CallOption) (*portpb.PortResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByUnloc", varargs...)
	ret0, _ := ret[0].(*portpb.PortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUnloc indicates an expected call of GetByUnloc.
func (mr *MockPortServiceClientMockRecorder) GetByUnloc(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUnloc", reflect.TypeOf((*MockPortServiceClient)(nil).GetByUnloc), varargs...)
}

// Update mocks base method.
func (m *MockPortServiceClient) Update(ctx context.Context, in *portpb.PortRequest, opts ...grpc.CallOption) (*portpb.PortBoolResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*portpb.PortBoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPortServiceClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPortServiceClient)(nil).Update), varargs...)
}

// UpdateAll mocks base method.
func (m *MockPortServiceClient) UpdateAll(ctx context.Context, opts ...grpc.CallOption) (portpb.PortService_UpdateAllClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAll", varargs...)
	ret0, _ := ret[0].(portpb.PortService_UpdateAllClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockPortServiceClientMockRecorder) UpdateAll(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockPortServiceClient)(nil).UpdateAll), varargs...)
}

// MockPortService_UpdateAllClient is a mock of PortService_UpdateAllClient interface.
type MockPortService_UpdateAllClient struct {
	ctrl     *gomock.Controller
	recorder *MockPortService_UpdateAllClientMockRecorder
}

// MockPortService_UpdateAllClientMockRecorder is the mock recorder for MockPortService_UpdateAllClient.
type MockPortService_UpdateAllClientMockRecorder struct {
	mock *MockPortService_UpdateAllClient
}

// NewMockPortService_UpdateAllClient creates a new mock instance.
func NewMockPortService_UpdateAllClient(ctrl *gomock.Controller) *MockPortService_UpdateAllClient {
	mock := &MockPortService_UpdateAllClient{ctrl: ctrl}
	mock.recorder = &MockPortService_UpdateAllClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortService_UpdateAllClient) EXPECT() *MockPortService_UpdateAllClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockPortService_UpdateAllClient) CloseAndRecv() (*portpb.PortStringResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*portpb.PortStringResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockPortService_UpdateAllClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockPortService_UpdateAllClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockPortService_UpdateAllClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockPortService_UpdateAllClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPortService_UpdateAllClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockPortService_UpdateAllClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPortService_UpdateAllClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPortService_UpdateAllClient)(nil).Context))
}

// Header mocks base method.
func (m *MockPortService_UpdateAllClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockPortService_UpdateAllClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPortService_UpdateAllClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockPortService_UpdateAllClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPortService_UpdateAllClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPortService_UpdateAllClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockPortService_UpdateAllClient) Send(arg0 *portpb.PortRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPortService_UpdateAllClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPortService_UpdateAllClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPortService_UpdateAllClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPortService_UpdateAllClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPortService_UpdateAllClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockPortService_UpdateAllClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockPortService_UpdateAllClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPortService_UpdateAllClient)(nil).Trailer))
}

// MockPortService_GetAllClient is a mock of PortService_GetAllClient interface.
type MockPortService_GetAllClient struct {
	ctrl     *gomock.Controller
	recorder *MockPortService_GetAllClientMockRecorder
}

// MockPortService_GetAllClientMockRecorder is the mock recorder for MockPortService_GetAllClient.
type MockPortService_GetAllClientMockRecorder struct {
	mock *MockPortService_GetAllClient
}

// NewMockPortService_GetAllClient creates a new mock instance.
func NewMockPortService_GetAllClient(ctrl *gomock.Controller) *MockPortService_GetAllClient {
	mock := &MockPortService_GetAllClient{ctrl: ctrl}
	mock.recorder = &MockPortService_GetAllClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortService_GetAllClient) EXPECT() *MockPortService_GetAllClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockPortService_GetAllClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockPortService_GetAllClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPortService_GetAllClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockPortService_GetAllClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPortService_GetAllClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPortService_GetAllClient)(nil).Context))
}

// Header mocks base method.
func (m *MockPortService_GetAllClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockPortService_GetAllClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPortService_GetAllClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockPortService_GetAllClient) Recv() (*portpb.PortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*portpb.PortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPortService_GetAllClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPortService_GetAllClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockPortService_GetAllClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPortService_GetAllClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPortService_GetAllClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockPortService_GetAllClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPortService_GetAllClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPortService_GetAllClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockPortService_GetAllClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockPortService_GetAllClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPortService_GetAllClient)(nil).Trailer))
}

// MockPortServiceServer is a mock of PortServiceServer interface.
type MockPortServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPortServiceServerMockRecorder
}

// MockPortServiceServerMockRecorder is the mock recorder for MockPortServiceServer.
type MockPortServiceServerMockRecorder struct {
	mock *MockPortServiceServer
}

// NewMockPortServiceServer creates a new mock instance.
func NewMockPortServiceServer(ctrl *gomock.Controller) *MockPortServiceServer {
	mock := &MockPortServiceServer{ctrl: ctrl}
	mock.recorder = &MockPortServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortServiceServer) EXPECT() *MockPortServiceServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPortServiceServer) Create(arg0 context.Context, arg1 *portpb.PortRequest) (*portpb.PortBoolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*portpb.PortBoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPortServiceServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPortServiceServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockPortServiceServer) Delete(arg0 context.Context, arg1 *portpb.PortIdRequest) (*portpb.PortBoolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*portpb.PortBoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPortServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPortServiceServer)(nil).Delete), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockPortServiceServer) GetAll(arg0 *portpb.PortsGetAllRequest, arg1 portpb.PortService_GetAllServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPortServiceServerMockRecorder) GetAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPortServiceServer)(nil).GetAll), arg0, arg1)
}

// GetById mocks base method.
func (m *MockPortServiceServer) GetById(arg0 context.Context, arg1 *portpb.PortIdRequest) (*portpb.PortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0, arg1)
	ret0, _ := ret[0].(*portpb.PortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockPortServiceServerMockRecorder) GetById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockPortServiceServer)(nil).GetById), arg0, arg1)
}

// GetByUnloc mocks base method.
func (m *MockPortServiceServer) GetByUnloc(arg0 context.Context, arg1 *portpb.PortUnlocRequest) (*portpb.PortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUnloc", arg0, arg1)
	ret0, _ := ret[0].(*portpb.PortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUnloc indicates an expected call of GetByUnloc.
func (mr *MockPortServiceServerMockRecorder) GetByUnloc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUnloc", reflect.TypeOf((*MockPortServiceServer)(nil).GetByUnloc), arg0, arg1)
}

// Update mocks base method.
func (m *MockPortServiceServer) Update(arg0 context.Context, arg1 *portpb.PortRequest) (*portpb.PortBoolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*portpb.PortBoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPortServiceServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPortServiceServer)(nil).Update), arg0, arg1)
}

// UpdateAll mocks base method.
func (m *MockPortServiceServer) UpdateAll(arg0 portpb.PortService_UpdateAllServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockPortServiceServerMockRecorder) UpdateAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockPortServiceServer)(nil).UpdateAll), arg0)
}

// mustEmbedUnimplementedPortServiceServer mocks base method.
func (m *MockPortServiceServer) mustEmbedUnimplementedPortServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPortServiceServer")
}

// mustEmbedUnimplementedPortServiceServer indicates an expected call of mustEmbedUnimplementedPortServiceServer.
func (mr *MockPortServiceServerMockRecorder) mustEmbedUnimplementedPortServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPortServiceServer", reflect.TypeOf((*MockPortServiceServer)(nil).mustEmbedUnimplementedPortServiceServer))
}

// MockUnsafePortServiceServer is a mock of UnsafePortServiceServer interface.
type MockUnsafePortServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePortServiceServerMockRecorder
}

// MockUnsafePortServiceServerMockRecorder is the mock recorder for MockUnsafePortServiceServer.
type MockUnsafePortServiceServerMockRecorder struct {
	mock *MockUnsafePortServiceServer
}

// NewMockUnsafePortServiceServer creates a new mock instance.
func NewMockUnsafePortServiceServer(ctrl *gomock.Controller) *MockUnsafePortServiceServer {
	mock := &MockUnsafePortServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePortServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePortServiceServer) EXPECT() *MockUnsafePortServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPortServiceServer mocks base method.
func (m *MockUnsafePortServiceServer) mustEmbedUnimplementedPortServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPortServiceServer")
}

// mustEmbedUnimplementedPortServiceServer indicates an expected call of mustEmbedUnimplementedPortServiceServer.
func (mr *MockUnsafePortServiceServerMockRecorder) mustEmbedUnimplementedPortServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPortServiceServer", reflect.TypeOf((*MockUnsafePortServiceServer)(nil).mustEmbedUnimplementedPortServiceServer))
}

// MockPortService_UpdateAllServer is a mock of PortService_UpdateAllServer interface.
type MockPortService_UpdateAllServer struct {
	ctrl     *gomock.Controller
	recorder *MockPortService_UpdateAllServerMockRecorder
}

// MockPortService_UpdateAllServerMockRecorder is the mock recorder for MockPortService_UpdateAllServer.
type MockPortService_UpdateAllServerMockRecorder struct {
	mock *MockPortService_UpdateAllServer
}

// NewMockPortService_UpdateAllServer creates a new mock instance.
func NewMockPortService_UpdateAllServer(ctrl *gomock.Controller) *MockPortService_UpdateAllServer {
	mock := &MockPortService_UpdateAllServer{ctrl: ctrl}
	mock.recorder = &MockPortService_UpdateAllServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortService_UpdateAllServer) EXPECT() *MockPortService_UpdateAllServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockPortService_UpdateAllServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPortService_UpdateAllServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPortService_UpdateAllServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockPortService_UpdateAllServer) Recv() (*portpb.PortRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*portpb.PortRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPortService_UpdateAllServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPortService_UpdateAllServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockPortService_UpdateAllServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPortService_UpdateAllServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPortService_UpdateAllServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockPortService_UpdateAllServer) SendAndClose(arg0 *portpb.PortStringResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockPortService_UpdateAllServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockPortService_UpdateAllServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockPortService_UpdateAllServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockPortService_UpdateAllServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPortService_UpdateAllServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPortService_UpdateAllServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPortService_UpdateAllServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPortService_UpdateAllServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockPortService_UpdateAllServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockPortService_UpdateAllServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPortService_UpdateAllServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockPortService_UpdateAllServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockPortService_UpdateAllServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPortService_UpdateAllServer)(nil).SetTrailer), arg0)
}

// MockPortService_GetAllServer is a mock of PortService_GetAllServer interface.
type MockPortService_GetAllServer struct {
	ctrl     *gomock.Controller
	recorder *MockPortService_GetAllServerMockRecorder
}

// MockPortService_GetAllServerMockRecorder is the mock recorder for MockPortService_GetAllServer.
type MockPortService_GetAllServerMockRecorder struct {
	mock *MockPortService_GetAllServer
}

// NewMockPortService_GetAllServer creates a new mock instance.
func NewMockPortService_GetAllServer(ctrl *gomock.Controller) *MockPortService_GetAllServer {
	mock := &MockPortService_GetAllServer{ctrl: ctrl}
	mock.recorder = &MockPortService_GetAllServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortService_GetAllServer) EXPECT() *MockPortService_GetAllServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockPortService_GetAllServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPortService_GetAllServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPortService_GetAllServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockPortService_GetAllServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPortService_GetAllServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPortService_GetAllServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockPortService_GetAllServer) Send(arg0 *portpb.PortResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPortService_GetAllServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPortService_GetAllServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockPortService_GetAllServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockPortService_GetAllServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPortService_GetAllServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPortService_GetAllServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPortService_GetAllServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPortService_GetAllServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockPortService_GetAllServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockPortService_GetAllServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPortService_GetAllServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockPortService_GetAllServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockPortService_GetAllServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPortService_GetAllServer)(nil).SetTrailer), arg0)
}
